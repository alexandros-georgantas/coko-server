##
### From Pubsweet User
##

scalar DateTime

extend type Query {
  user(id: ID): User
  users: [User]
}

extend type Mutation {
  createUser(input: UserInput): User
  deleteUser(id: ID): User
  updateUser(id: ID, input: UserInput): User
}

type User {
  id: ID!
  created: DateTime!
  updated: DateTime
  username: String
  admin: Boolean
  identities: [Identity]
  defaultIdentity: Identity
}

type Name {
  surname: String
  givenNames: String
  title: String
}

union Identity = Local | External

# local identity (not from ORCID, etc.)
type Local {
  name: Name
  email: String
  aff: String # JATS <aff>
}

type External {
  identifier: String
  email: String
  aff: String # JATS <aff>
}

input UserInput {
  username: String!
  email: String!
  password: String
  rev: String
}

# Authentication

extend type Query {
  # Get the currently authenticated user based on the JWT in the HTTP headers
  currentUser: User
}

extend type Mutation {
  # Authenticate a user using username and password
  # This does NOT check if the identity object associated with User is confirmed
  loginUser(input: LoginUserInput): LoginResult
}

# User details and bearer token
type LoginResult {
  user: User!
  token: String!
}

input LoginUserInput {
  username: String!
  password: String!
}

##
### From Micropublications User
##

extend type Query {
  validatePasswordTokenExpiry(token: String!): Boolean!
  currentUserWithIdentity: User
  usersWithIdentities: [User]
}

extend type Mutation {
  # Authenticate a user using username and password
  # This does check if the identity object associated with User is confirmed
  login(input: LoginUserInput): LoginResult
  signUp(input: UserInput): User!

  verifyEmail(token: String!): Boolean!
  resendVerificationEmail(token: String!): Boolean!
  resendVerificationEmailFromLogin(
    username: String!
    password: String!
  ): Boolean!

  updatePassword(input: UpdatePasswordInput): ID!
  updatePersonalInformation(input: UpdatePersonalInformationInput!): User!
  updateUsername(input: UpdateUsernameInput!): User!

  sendPasswordResetEmail(email: String!): Boolean!
  resetPassword(token: String!, password: String!): Boolean!
}

extend type User {
  agreedTc: Boolean
  displayName: String!
  givenNames: String
  surname: String
  orcid: String
}

input UpdatePersonalInformationInput {
  userId: ID
  givenNames: String!
  surname: String!
  orcid: String
}

input UpdateUsernameInput {
  userId: ID
  username: String!
}

input UpdatePasswordInput {
  currentPassword: String!
  newPassword: String!
}
